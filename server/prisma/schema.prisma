// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String   @id @default(uuid())
  name          String
  cpf           String   @unique
  date_of_birth String?
  email         String?  @unique
  password_hash String?
  phone         String?
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  LoginCustomer LoginCustomer[]
  Address       Address[]

  CustomerCategory     CustomerCategory? @relation(fields: [customer_category_id], references: [id])
  customer_category_id String?

  @@map("customers")
}

model CustomerCategory {
  id          String     @id @default(uuid())
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  customers   Customer[]

  @@map("customers_categories")
}

model Employee {
  id            String   @id @default(uuid())
  name          String
  date_of_birth String
  cpf           String   @unique
  rg            String   @unique
  ctps          String   @unique
  phone         String?
  email         String?  @unique
  password_hash String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_active     Boolean  @default(true)

  Address       Address[]
  LoginEmployee LoginEmployee[]

  EmployeeRole     EmployeeRole? @relation(fields: [employee_role_id], references: [id])
  employee_role_id String?

  @@map("employees")
}

model EmployeeRole {
  id          String     @id @default(uuid())
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  employees   Employee[]

  @@map("employees_roles")
}

model Address {
  id           String   @id @default(uuid())
  description  String?
  street       String
  number       String?
  neighborhood String
  complement   String?
  city         String
  state        String
  cep          String
  is_active    Boolean  @default(true)
  updated_at   DateTime @updatedAt

  customer    Customer? @relation(fields: [customer_id], references: [id])
  customer_id String?

  employee    Employee? @relation(fields: [employee_id], references: [id])
  employee_id String?

  @@map("addresses")
}

model LoginCustomer {
  id String @id @default(uuid())

  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id String

  created_at DateTime @default(now())

  @@map("customers_logins")
}

model LoginEmployee {
  id String @id @default(uuid())

  employee    Employee @relation(fields: [employee_id], references: [id])
  employee_id String

  created_at DateTime @default(now())

  @@map("employees_logins")
}
