// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_active  Boolean  @default(true)
  Login      Login[]

  customer    Customer? @relation(fields: [customer_id], references: [id])
  customer_id String?

  Employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?
}

model Employee {
  id            String    @id @default(uuid())
  name          String
  date_of_birth String
  cpf           String    @unique
  rg            String    @unique
  ctps          String    @unique
  phone         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  is_active     Boolean   @default(true)
  addresses     Address[]
  User          User[]

  @@map("employees")
}

model Customer {
  id            String    @id @default(uuid())
  name          String
  cpf           String    @unique
  date_of_birth String?
  phone         String?
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  addresses     Address[]
  User          User[]

  @@map("customers")
}

model Address {
  id           String   @id @default(uuid())
  description  String?
  street       String
  number       String?
  complement   String?
  neighborhood String
  city         String
  state        String
  cep          String
  is_active    Boolean  @default(true)
  updated_at   DateTime @updatedAt

  customer    Customer? @relation(fields: [customer_id], references: [id])
  customer_id String?

  Employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?

  @@map("addresses")
}

model Login {
  id String @id @default(uuid())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  created_at DateTime @default(now())

  @@map("logins")
}
